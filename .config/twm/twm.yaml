# https://github.com/vinnymeller/twm/blob/master/doc/CONFIGURATION.md

search_paths: # directories we should begin searching for workspaces in. shell expansion is supported
  - "~/Development/Advantage_360" # default: ["~"]
  - "~/Development/DSC"
  - "~/Development/Mental_Load"
  - "~/Development/Myra"
  - "~/Development/SAP/Value_Cloud"
  - "~/DSC"
  - "~/DSC/03_Customers"
  - "~/Journal"

exclude_path_components: # search branches will be pruned the path being explored contains any of these components
  - .git
  - .direnv
  - node_modules
  - venv
  - target

max_search_depth: 3 # how deep we should search for workspaces (default: 3)
session_name_path_components:
  1 # how many parts of the workspace path to use in generating the session name by default
  # if you attempt to open two separate workspaces that would generate the same session name,
  # this value will be incremented until a unique session name is found

workspace_definitions: # our list of workspaces, each with different properties
  - name: default
    has_any_file: # if any file matches this list, we consider it a match, since its "has_any_file"
      - .twm.yaml
      # - .git
    default_layout: default # the layout to use if none is specified

  # - name: python # they all have to be named
  #   has_any_file: # if any file matches this list, we consider it a match, since its "has_any_file"
  #     - requirements.txt # more complex matching isn't implemented currently
  #     - setup.py
  #     - pyproject.toml
  #     - Pipfile
  #
  # - name: go
  #   has_all_files: # if all files match this list, we consider it a match, since its "has_all_files"
  #     - go.mod
  #     - go.sum
  #
  # - name: docker-compose # you can also combine conditions, as in this example, a docker-compose workspace is matched only if we have *any* of the docker-compose files and both `.git` folder and a `Dockerfile`
  #   has_any_file:
  #     - docker-compose.yaml
  #     - docker-compose.yml
  #   has_all_files:
  #     - Dockerfile
  #     - .git
  #
  # - name: node # the order of these definitions matters - if a directory matches multiple, the first one wins
  #   has_any_file:
  #     - package.json
  #     - yarn.lock
  #     - .nvmrc
  #
  # - name: rust
  #   has_any_file:
  #     - Cargo.toml
  #     - Cargo.lock

layouts: # our list of layouts just have names and a list of commands. the command get sent directly with tmux send-keys
    - name: default
      commands:
       - tmux new-window -t 1 -n Neovim
       - tmux send-keys -t 1 'nvim .' C-m

    - name: python-dev             # i chose not to use any custom configuration becuase that would be a lot of work to basically maintain a subset of possible functionality
      commands:
        - tmux split-window -h
        - tmux resize-pane -x 80
        - tmux split-window -v
        - tmux send-keys -t 0 'nvim .' C-m

    - name: rust-dev
      commands:
        - tmux split-window -h
        - tmux resize-pane -x 80
        - tmux select-pane -t 0
        - tmux send-keys -t 1 'cargo watch -x test -x run' C-m
        - nvim .

    - name: catchall-dev
      commands:
        - nvim .

    - name: split-bottom-panes
      commands:
        - tmux split-window -v
        - tmux resize-pane -y 20
        - tmux split-window -h
        - tmux select-pane -t 0

    - name: syslog-monitor
      inherits:
        - split-bottom-panes       # you can also inherit layouts, which will just run the commands from the inherited layout before running your specified commands. these can be nested arbitrarily. this is useful when you have many layouts that should look similar but, for example, have different commands they should run
      commands:
        - tmux send-keys -t 1 'tail -f /var/log/syslog' C-m
        - tmux send-keys -t 2 'journalctl -f' C-m
